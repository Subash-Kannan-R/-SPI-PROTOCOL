STATE MACHINE:
//state transistion
always@(negedge clk or negedge rstb) begin
 if(rstb==0)
   cur<=finish;
 else
   cur<=nxt;
 end
//FSM I/O
always @(start or cur or nbit) begin
                    nxt=cur;
                    clr=0; 
                    shift=0;//ss=0;
                    case(cur)
                             idle:begin
                                      if(start==1)
                                  begin
                                                                    case (cdiv)
                                                                             2’b00: mid=2;
                                                                             2’b01: mid=4;
                                                                             2’b10: mid=8;
                                                                             2’b11: mid=16;
                                                                    endcase
                                                          shift=1;
                                                          done=1’b0;
                                                          nxt=send;  
                                                          end
                           end //idle
                             send:begin
                                      ss=0;
                                      if(nbit!=8)
                                                begin shift=1; end
                                      else begin
                                                          rdata=rreg;done=1’b1;
                                                          nxt=finish;
                                                end
                                      end//send
                             finish:begin
                                                shift=0;
                                                ss=1;
                                                clr=1;
                                                nxt=idle;
                                       end
                             default: nxt=finish;
      endcase
    end//always
CLOCK GENERATOR BLOCK:
always@(negedge clk or posedge clr) begin
  if(clr==1)
                   begin cnt=0; sck=1; end
  else begin
          if(shift==1) begin
                   cnt=cnt+1;
            if(cnt==mid) begin
                    sck=~sck;
                   cnt=0;
                   end //mid
          end //shift
 end //rst
end
Tx BLOCK:
always@(negedge sck or posedge clr) begin
 if(clr==1) begin
            treg=8’hFF;  dout=1; 
  end 
 else begin
                   if(nbit==0) begin //load data into TREG
                             treg=tdat; dout=mlb?treg[7]:treg[0];
                   end //nbit_if
                   else begin
                             if(mlb==0) //LSB first, shift right
                                      begin treg={1’b1,treg[7:1]}; dout=treg[0]; end
                             else//MSB first shift LEFT
                                      begin treg={treg[6:0],1’b1}; dout=treg[7]; end
                   end
 end //rst
end
Rx BLOCK:
always@(posedge sck or posedge clr ) begin // or negedge rstb
 if(clr==1)  begin
                             nbit=0;  rreg=8’hFF;  end
    else begin
                     if(mlb==0) //LSB first, din@msb -> right shift
                             begin  rreg={din,rreg[7:1]};  end
                     else  //MSB first, din@lsb -> left shift
                             begin  rreg={rreg[6:0],din};  end
                     nbit=nbit+1;
 end //rst
end

SIMULATION OUPTUT OF MASTER: